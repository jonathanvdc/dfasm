using std;

namespace Automata
{
    public struct ConcatRegex : IRegex
    {
        public const this(set IRegex Left, set IRegex Right);
        
        public IRegex Left;
        public IRegex Right;
        
        public const string ToString()
        {
            string result = default(string);
            if (Left is UnionRegex)
            {
                result = "(" + Left.ToString() + ")";
            }
            else result = Left.ToString();
            if (Right is UnionRegex)
            {
                result += "(" + Right.ToString() + ")";
            }
            else result += Right.ToString();
            return result;
        }
        
        public const ENFAutomaton<RegexState, string> ToENFAutomaton()
        {
            var transTable = new TransitionTable<pair<RegexState, Optional<string>>, LinearSet<RegexState>>();
            
            var leftAutomaton = Left.ToENFAutomaton();
            var rightAutomaton = Right.ToENFAutomaton();
            
            var startState = new RegexState();
            
            transTable.Add(leftAutomaton.TransitionFunction);
            transTable.Add(rightAutomaton.TransitionFunction);
            
            var label = new pair<RegexState, Optional<string>>(startState, new Optional<string>());
            var leftStartStates = new LinearSet<RegexState>();
            leftStartStates.Add(leftAutomaton.StartState);
            transTable.Add(label, leftStartStates);
            
            var leftEndStates = leftAutomaton.AcceptingStates;
            var rightStartStates = new LinearSet<RegexState>();
            rightStartStates.Add(rightAutomaton.StartState);
            foreach (var item in leftEndStates.Items)
            {
                var pipeTransition = new pair<RegexState, Optional<string>>(item, new Optional<string>());
                transTable.Add(pipeTransition, rightStartStates);
            }
            
            var acceptingStates = rightAutomaton.AcceptingStates;
            
            return new ENFAutomaton<RegexState, string>(startState, acceptingStates, transTable);
        }
    }
}