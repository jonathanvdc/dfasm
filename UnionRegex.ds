using std;

namespace Automata
{
    public struct UnionRegex : IRegex
    {
        public const this(set IRegex Left, set IRegex Right);
        
        public IRegex Left;
        public IRegex Right;
        
        public const string ToString()
        {
            return Left.ToString() + "+" + Right.ToString();
        }
        
        public const ENFAutomaton<RegexState, string> ToENFAutomaton()
        {
            var startState = new RegexState();
            var transTable = new TransitionTable<pair<RegexState, Optional<string>>, LinearSet<RegexState>>();
            
            var leftAutomaton = Left.ToENFAutomaton();
            var rightAutomaton = Right.ToENFAutomaton();
            
            transTable.Add(leftAutomaton.TransitionFunction);
            transTable.Add(rightAutomaton.TransitionFunction);
            
            var label = new pair<RegexState, Optional<string>>(startState, new Optional<string>());
            var redirectedStates = new LinearSet<RegexState>();
            redirectedStates.Add(leftAutomaton.StartState);
            redirectedStates.Add(rightAutomaton.StartState);
            transTable.Add(label, redirectedStates);
            
            var acceptingStates = leftAutomaton.AcceptingStates;
            acceptingStates.AddAll(rightAutomaton.AcceptingStates);
            
            return new ENFAutomaton<RegexState, string>(startState, acceptingStates, transTable);
        }
    }
}